[
{
	"uri": "https://o_o.jseung.me/ctf/",
	"title": "CTF",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/cve/",
	"title": "CVE",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/tech/",
	"title": "HACKING TECHNIQUE",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\nWargame https://ctf.j0n9hyun.xyz/ https://pwnable.tw/ https://dreamhack.io/\n"
},
{
	"uri": "https://o_o.jseung.me/tech/web/",
	"title": "web",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\nhttps://www.hahwul.com/cullinan/main/\n"
},
{
	"uri": "https://o_o.jseung.me/tech/pwn/",
	"title": "pwn",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\nhttps://lazenca.net\n"
},
{
	"uri": "https://o_o.jseung.me/tech/rev/",
	"title": "rev",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/tech/crypto/",
	"title": "crypto",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/tech/mobile/",
	"title": "mobile",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/tech/forensic/",
	"title": "forensic",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/tech/hardware/",
	"title": "hardware",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/tech/network/",
	"title": "network",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://o_o.jseung.me/ctf/2020/vishwactf/",
	"title": "2022 Vishwactf",
	"tags": [],
	"description": "",
	"content": "WEB Stock Bot  We have our online shop of computer related accessories. So for easy customer interaction we have made a stock bot which will give you how many units of enlisted products are available.\nhttps://st0ck-b0t.vishwactf.com/\n 페이지에 접속해보면 봇에게 특정 상품을 요구할 수 있다. 아무거나 입력해보면 패킷 상에서 다음과 같은 결과를 받아볼 수 있다.\n\u0026lt;br /\u0026gt; \u0026lt;b\u0026gt;Warning\u0026lt;/b\u0026gt;: file_get_contents(hihihihihihihih): failed to open stream: No such file or directory in \u0026lt;b\u0026gt;/opt/app-root/src/Products/check.php\u0026lt;/b\u0026gt; on line \u0026lt;b\u0026gt;10\u0026lt;/b\u0026gt;\u0026lt;br /\u0026gt; {\u0026#34;Quantity\u0026#34;:false} 위 오류를 통해 다음과 같은 정보를 알 수 있다.\n PHP 사용 file_get_contents를 통해 상품을 가져옴 상품을 체크하는 로직은 /opt/app-root/src/Products/check.php에 있음.  file_get_contents 함수를 사용하므로 Local file을 읽어들일 수 있다. 우선 위 오류에 출력된 check.php 부터 읽어보자\n\u0026lt;?php \\n\\n if(isset($_GET[\u0026#39;product\u0026#39;])){\\n $product = $_GET[\u0026#39;product\u0026#39;];\\n header(\u0026#39;Content-type: application/json\u0026#39;);\\n if(strpos($product,\u0026#39;Flag\u0026#39;)){\\n $data = array(\u0026#39;Flag\u0026#39; =\u0026gt; file_get_contents($product));\\n }\\n else{\\n $data = array(\u0026#39;Quantity\u0026#39; =\u0026gt; file_get_contents($product));\\n }\\n echo json_encode($data);\\n }\\n\\n?\u0026gt; 위 코드를 통해 Flag를 요청해야 함을 알 수 있다. 봇 채팅을 이용하면 js에서 무시되고, check.php에 직접 접근해서 요청하면 flag를 얻을 수 있다.\nVishwaCTF{b0T_kn0w5_7h3_s3cr3t} Todo List  Simple Todo list website to manage your tasks. Use it wisely.\nhttps://t0-d0-l1st.vishwactf.com/\n 간단한 TODO 작성 홈페이지가 제공된다.\n/* Hint: Flag is present at /flag.php */ 페이지 소스코드 내 /flag.php에 접근하라는 힌트가 주어졌다. 화면 우측 하단 버튼을 클릭하면 소스코드를 볼 수 있는데 내용은 아래와 같다.\n\u0026lt;?php Class ShowSource{ public function __toString() { return highlight_file($this-\u0026gt;source, true); } } if(isset($_GET[\u0026#39;source\u0026#39;])){ $s = new ShowSource(); $s-\u0026gt;source = __FILE__; echo $s; exit; } $todos = []; if(isset($_COOKIE[\u0026#39;todos\u0026#39;])){ $c = $_COOKIE[\u0026#39;todos\u0026#39;]; $h = substr($c, 0, 40); $m = substr($c, 40); if(sha1($m) === $h){ $todos = unserialize($m); } } if(isset($_POST[\u0026#39;text\u0026#39;])){ $todo = $_POST[\u0026#39;text\u0026#39;]; $todos[] = $todo; $m = serialize($todos); $h = sha1($m); setcookie(\u0026#39;todos\u0026#39;, $h.$m); header(\u0026#39;Location: \u0026#39;.$_SERVER[\u0026#39;REQUEST_URI\u0026#39;]); exit; } ?\u0026gt; TODO를 추가하면 Cookie를 통해 관리됨을 알 수 있다. 또한 serialize/deserialize를 이용하여 쿠키 내 TODO list를 저장하고, 읽어들임을 알 수 있다.\nSHA1 해싱을 통해 무결성을 검증하는 것처럼 보이지만 결국엔 serialize된 데이터를 변조한 후에 저 값을 나도 만들 수 있기 때문에 별로 문제가 되진 않는다.\na:5:{i:0;s:4:\u0026#34;AAAA\u0026#34;;i:1;s:4:\u0026#34;BBBB\u0026#34;} cookie 내 존재하는 serialize 데이터는 위와 같다. 현재 TODO list에 AAAA와 BBBB를 추가한 상태다.\n다시 코드를 보면 ShowSource 클래스가 존재하고, 해당 클래스는 출력하려고 할 때, $this-\u0026gt;source의 소스코드를 출력하는 것을 확인할 수 있다.\na:5:{i:0;s:4:\u0026#34;AAAA\u0026#34;;i:1;O:10:\u0026#34;ShowSource\u0026#34;:1:{s:6:\u0026#34;source\u0026#34;;s:10:\u0026#34;./flag.php\u0026#34;;}} deserialize된 데이터는 화면에 TODO List로 출력되므로, 기존의 배열 구조를 유지한 상태로 변조된 ShowSource 클래스를 삽입하여 공격이 가능하다.\nFlag is VishwaCTF{t7e_f1a6_1s_1is73d} Request Me FLAG  Somebody hosted this website having flag in it. Just request the FLAG to them maybe they will give you.\nhttps://r3qu35t-m3-fl4g.vishwactf.com/\n 스트레스 받게 했던 문제. 홈페이지에 접속하면 index.php에서 302 응답을 받아 404.php로 리다이렉트 된다. 도통 뭘 원하는지 몰랐는데, 대회 종료 후 라업을 보니,,,\ncurl https://r3qu35t-m3-fl4g.vishwactf.com/index.php -X FLAG -i ㅋ,,,\nVishwaCTF{404_1s_ju57_4n_i11u5ion} Strong Encryption  This is our one of the most strong encryption algorithm. Try to decrypt the flag by tracing how it is encrypted.\nUrl - https://5tr0ng-3ncrypt10n.vishwactf.com/\n 접속하면 아래와 같은 php 코드를 확인할 수 있다.\n\u0026lt;?php   // Decrypt -\u0026gt; 576e78697e65445c4a7c8033766770357c3960377460357360703a6f6982452f12f4712f4c769a75b33cb995fa169056168939a8b0b28eafe0d724f18dc4a7   $flag=\u0026#34;\u0026#34;;   function encrypt($str,$enKey){   $strHex=\u0026#39;\u0026#39;;  $Key=\u0026#39;\u0026#39;;  $rKey=69;  $tmpKey=\u0026#39;\u0026#39;;   for($i=0;$i\u0026lt;strlen($enKey);$i++){  $Key.=ord($enKey[$i])+$rKey;  $tmpKey.=chr(ord($enKey[$i])+$rKey);  }   $rKeyHex=dechex($rKey);   $enKeyHash = hash(\u0026#39;sha256\u0026#39;,$tmpKey);   for ($i=0,$j=0; $i \u0026lt; strlen($str); $i++,$j++){  if($j==strlen($Key)){  $j=0;  }  $strHex .= dechex(ord($str[$i])+$Key[$j]);  }  $encTxt = $strHex.$rKeyHex.$enKeyHash;  return $encTxt;  }   $encTxt = encrypt($flag, \u0026#34;VishwaCTF\u0026#34;);   echo $encTxt;  ?\u0026gt;카테고리는 WEB인데 그냥 Crypto,,? 라고 하기도 뭐하고 그냥 웹립싱? ㅋㅋㅋ\ndef dec(key, ciphertext):  ks = \u0026#39;\u0026#39;.join([str(ord(k) + 0x45) for k in key])  f = \u0026#39;\u0026#39;  for i in range(0, len(ciphertext), 2):  c = ciphertext[i:i+2]  b = int(c,16)  k = int(ks[(i/2)%len(ks)])  f += chr(b - k)  return f  dec(\u0026#34;VishwaCTF\u0026#34;, \u0026#34;576e78697e65445c4a7c8033766770357c3960377460357360703a6f6982\u0026#34;) 위와 같이 decrypt 코드를 짜서 돌리면 된다.\nVishwaCTF{y0u_h4v3_4n_0p_m1nd} Keep Your Secrets  Yet another API for ‘user’ signup and login. You know the drill, GO!\nhttps://k33p-y0ur-53cr3t5.vishwactf.com/\n 접속하면 아래와 같이 API 사용법에 대한 내용이 나온다.\n📃 API documentation V.2.0 📃 GET Routes /api/signup/{username} - register a user POST Routes /api/login/user - only meant for admins pass your token in headers as \u0026#39;token\u0026#39; signup을 진행하면 token을 발급받게 되는데, JWT 포맷으로 이루어져있다. none type attack을 시도해봤지만 안됐고, key를 crack하는 문제일 것이라고 생각하여 브루트포스를 진행했다.\nKey는 owasp였다.\nVishwaCTF{w3@k_$ecr3t$} Flag .Collection  We are collecting cool flag names for our next CTF, please suggest us some cool names and we’ll store them in our database for our next CTF.\nhttps://fl4g-c0ll3ct10n.vishwactf.com/\n 이건 아직 모름. firebase 관련 문제인듯 한데,,,\nhttps://firestore.googleapis.com/v1/projects/vishwa-challenge-12/databases/(default)/documents/flag\nvishwactf{c0nfigur3_y0ur_fir3b@s3_rule$} Cryptography John the Rocker 제공된 문제를 ssh2john으로 추출하고, John the Ripper 사용하여 Hash crack 하는 문제.\nVishwaCTF{!!**john**!!} Tallest Header  My friend sent me file and said how amazing this is, but i think while sending file corrupted. Can you help me fixing this? PS: make it lowercase\n binwalk를 이용해 카빙해보면 enc 데이터와 enc 소스코드를 얻을 수 있음. 단순 치환암호였기 때문에 수작업으로 이를 해독함.\nVishwaCTF{TR1CKY_H34D3R_W1TH_P3RMU7AT10N} JumbleBumble  Jumble Bumble been encode, get the flag from the code\n 문제의 encrypt 로직을 보면 다음과 같다.\nimport random from Crypto.Util.number import getPrime, bytes_to_long  flags = []  with open(\u0026#39;stuff.txt\u0026#39;, \u0026#39;rb\u0026#39;) as f:  for stuff in f.readlines():  flags.append(stuff)   with open(\u0026#39;flag.txt\u0026#39;, \u0026#39;rb\u0026#39;) as f:  flag = f.read()  flags.append(flag)  random.shuffle(flags)  for rand in flags:  p = getPrime(1024)  q = getPrime(1024)  n = p * q  e = 4  m = bytes_to_long(rand)  c = pow(m, e, n)  with open(\u0026#39;output.txt\u0026#39;, \u0026#39;a\u0026#39;) as f:  f.write(f\u0026#39;{n}\\n\u0026#39;)  f.write(f\u0026#39;{e}\\n\u0026#39;)  f.write(f\u0026#39;{c}\\n\\n\u0026#39;) stuff라는 쓰레기값들 안에 flag를 섞어서 암호화를 진행한다. 바로 취약점이 보이는데, e 값이 4로 설정 되어있는 것으로 보아\n$$ m^e \u0026lt; n $$\n위 식이 만족하게 되어 mod 연산이 취해지지 않을 것으로 예측된다. encrypt 된 데이터는 아래와 같다.\n9895257608525793168362389845628902285985444377453839117812158233120160362300672532695792680438878396298456828123924966217724176436632686888103153999249472707375426050469256231026071966788110318535037779314797806833009930390757623009011661785912329049206373090090589773206279477261440565895174331963962792559239659309238293258089454720397039707231070127034478593376342981536650704348893537846905760621231615108102393714905122870351385322152897444168225168056559087784157523741592026904609638367875668745595850082618894323148264944455655700677515440124103204861146257676590547651155626828635322867579094811964846886101 4 49027849573693202016831483632288631019808489156023569102048032150709765393653121181751127578575150457778413775376318751815435494031059936819766580971267297386871600535770171180352357436389146506250000 13875949052404491911414181895983637482846633228970540023452432562087682195756805219573210741137799237884043688791417306305818188870813790457320148044093590478187480631446643690866321314181010958511571228795017652179970526429438825651647765978827268148163927174313644593348926140682168968216291774998867471854783331380577210977623996418865097077663735040452220161573609941069034736063784264686818819258665441946012025040180171464198266220677946704235863025443292286333375087008651661638393602537786950686827284000344724857341145582649448857235097527426922197034644156867813692660895345624400574114897111307245570215331 4 172294788480927470854941781874710437286070659277780650071535516231337741361583941039937997353672134039446400936723729530991742022963920663063490276394464733091639231901339240204663904305031266487740176 ... 15037529579687360861096387696366760797121686138020847511985324546620490707314884485302515069062431311870675455252150581715037426488992458312603876045036247869324680267802838509164842442082185070374090555135906508010263142300393487553860650608224430747311857856856536073085405153215655705120237926029776422115558004813906765886787243441237423191161812773613046591244049672405047954246049425752974088612997018343505216188062681620174025602086021417387654213694245656803351059862799297801633547670285095074312312534624008909932295882358226767586379751712434692265123244627532035273292463057036597394919922642211695547507 4 171680542724254089150724369075636860881561740639443447403991907144155043889456031184227042605537625708619190865538321595495754050771552489950588341254767905917106592421615121882232598897306466913601296 13429318136571852145145649411772491995332035293730226791251563560301809436776254817224615289443655170569736246470393909437556925322131303835353484836979951773463320270476900331307190257818047623952712925834888009156673785486596961309758468135925110107730363598538946152166857127804719928347657986687722906484485830771687328344892838668063970810268430714107514868174858412310311572137489165417257889449057032018101807656492665066046884558691042751221915774948607359726402125391345567795296366495183103950017877281952404893826385252866830903527304184990783022333007975894148881834118051727610738520081545675298240582993 4 49620546793711579782402639693377280522728526662509820457210884055445991049736319471760879817907638541914701296886947181962112393611224773708306316648797562964914200791382533487387764578519064974083856 아래와 같이 복호화 코드를 작성했다.\nimport gmpy2 from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes   raw = open(\u0026#34;./jumblebumble.txt\u0026#34;).read()  data_list = raw.split(\u0026#39;\\n\\n\u0026#39;) print(len(data_list))  for i in range(1):  for data in data_list:  if len(data) \u0026lt; 5: break  objs = data.split(\u0026#39;\\n\u0026#39;)   n = gmpy2.mpz(objs[0])  e = gmpy2.mpz(objs[1])  c = gmpy2.mpz(objs[2])    s1 = gmpy2.isqrt(c+i*n)  s2 = gmpy2.isqrt(s1)   print(long_to_bytes(s2).replace(b\u0026#39;\\x00\u0026#39;, b\u0026#39;\u0026#39;)) 실행하면 플래그가 나온다\nVishwaCTF{c4yp70gr2phy_1s_n07_e25y} Reversing Run The Cat cat 문자로 덕지덕지 난독화 되어있는 문제였는데, 하나씩 변환하다보면 실제 로직은 그리 복잡하지 않음. 보기 좋게 변환하면 아래와 같음.\n def mul3(cat):  return str(int(cat)*3)  def combine(cat, cats):  #print(cat, cats)  cat1 = 0  cat2 = 0  i = 0  result = \u0026#34;\u0026#34;  while cat1 \u0026lt; len(cat) and cat2 \u0026lt; len(cats):  if i%3 == 0:  result += cats[cat2]  cat2 += 1  else:  result += cat[cat1]  cat1 += 1  i += 1  return result  def rev(cat):  return cat[::-1] # reverse  def mul3_and_rev(cat):  # \u0026lt;앞3글자*3\u0026gt;\u0026lt;입력값거꾸로\u0026gt;  return mul3(cat[:3]) + rev(cat)  def none(cat):  return cat  def Rat(cat):  # Cat9\u0026lt;앞3글자\u0026gt;  return \u0026#34;Cat9\u0026#34; + cat[:3]  def main(cat):  if len(cat) == 9:  if str.isdigit(cat[:3]) and\\  str.isdigit(cat[len(cat)-3+1:]):  result = combine(mul3_and_rev(cat), Rat(none(rev(cat))))  print(mul3_and_rev(cat), Rat(none(rev(cat))))  print(result)  if result == \u0026#34;C20a73t0294t0ac2194\u0026#34;:  flag = \u0026#34;runner_\u0026#34; + cat  print(\u0026#34;So here you are!! VishwaCTF{\u0026#34;,flag,\u0026#34;}\u0026#34;)  return True  return False  print(\u0026#34;What\u0026#39;S tHe aNsWer\u0026#34;) cat = input() main(cat) result가 C20a73t0294t0ac2194 문자열이 되도록 하는 길이 9의 input 값을 찾는 문제인데, 로직상 가운데 3글자가 cat이다. 이후는 그냥 브포 돌렸다.\nfor num1 in range(0,1000):  for num2 in range(0,1000):  key = \u0026#34;%.3d\u0026#34; % num1 + \u0026#34;cat\u0026#34; + \u0026#34;%.3d\u0026#34; % num2  if (Cat(key)): exit(1) 실행해보면 플래그가 나온다.\nVishwaCTF{runner_691cat420} OverCook printflag() 함수가 존재하고, 그 내에 10진수 값들을 string으로 풀어내면 플래그가 나온다.\nVishwaCTF{r3vers1ng_dud3} Take Your Time 조건을 만족하면 itachi() 함수를 실행하기 때문에, 강제로 코드패치를 통해 실행을 시켜주니 플래그가 나왔다.\nVishwaCTF{t!m3_!5_m0n3y} Confusion 바이너리에서 한글자씩 비교하는 cmp 연산 부분을 분석해보면 어떤 값을 입력해야 하는지 알 수 있음.\nVishwaCTF{64_103_109_107_65_96_107_47} "
},
{
	"uri": "https://o_o.jseung.me/ctf/2020/24th-hackingcamp-ctf/",
	"title": "24th Hackingcamp Ctf",
	"tags": [],
	"description": "",
	"content": "WEB Basic Auth  어디로든 문~~~ 은 잠겨있습니다. 열쇠가 필요하신가요?\n #! /usr/bin/env python3 #-*- coding: utf-8 -*-  from flask import Flask from flask import request, url_for  from functools import wraps from flag import FLAG import os, json  server = Flask(__name__) server.secret_key = os.urandom(32)   def check_auth(f):  @wraps(f)  def func(*args, **kwargs):  page = kwargs[\u0026#39;page\u0026#39;]  if page.split(\u0026#39;.\u0026#39;)[-1] in [\u0026#39;js\u0026#39;, \u0026#39;css\u0026#39;, \u0026#39;png\u0026#39;, \u0026#39;jpg\u0026#39;]:  pass  else:  auth = request.authorization  if not (auth and check_login(auth.username, auth.password)):  return (\u0026#39;Wrong! who are you???😑\u0026#39;, 401, {  \u0026#39;WWW-Authenticate\u0026#39;: \u0026#39;Basic realm=\u0026#34;show me your id,pw\u0026#34;\u0026#39;  })  return f(*args, **kwargs)  return func    def check_login(user_id, user_pw):  with open(url_for(\u0026#39;static\u0026#39;, filename=\u0026#39;account\u0026#39;)[1:], \u0026#39;r\u0026#39;) as f:  data = f.read().strip().split(\u0026#39;:\u0026#39;)  admin_id = data[0]  admin_pw = data[1]  if user_id == admin_id and user_pw == admin_pw:  return True  return False   @server.route(\u0026#39;/\u0026#39;) def main():  return \u0026#39;Welcome! go to any page!\u0026#39;  @server.route(\u0026#39;/\u0026lt;page\u0026gt;\u0026#39;) @check_auth def flag(page):  if \u0026#39;.\u0026#39; in page:  return server.send_static_file(page)  return FLAG   if __name__ == \u0026#39;__main__\u0026#39;:  server.run(host=\u0026#39;0.0.0.0\u0026#39;) 문제 코드를 보면 로그인 성공 후 dot(.)이 없는 /\u0026lt;page\u0026gt; 즉, 아무 페이지나 접근하면 플래그를 주는 것을 알 수 있다. 그러나 실제로 접근해보면 check_auth() decorator function에 의해 HTTP Basic Authentication을 요구함을 알 수 있다. Basic Authentication에 사용되는 계정은 /static/account에 존재하며, 접근 시 그 내용은 아래와 같다.\nThisIsNotFlagJustAdminID:ThisIsNotFlagJustAdminPassword 위 내용을 이용해서 Basic Authentication 인증을 시도하면 로그인이 진행되지 않는다. account 파일에 접근할 때 사용한 url_for 함수가 webroot를 기반으로 한 경로를 반환하지만, apache2 설정을 맞추어 주지 않았기 때문이다.\n취약점은 확장자 검사 시 발생한다. 기본적으로 인증이 불필요한 js, css, png, jpg와 같은 파일을 요청할 경우 확장자를 검사하여 인증 과정을 지나치도록 되어있다. 그러나 /js 와 같은 형태로 요청 시 split 결과가 ['js'] 가 되기 때문에 인증 로직을 우회할 수 있다.\nFLAG HCAMP{c4f5d41c69c57250471bc5bb9ddb3f77ed4237a2a8b235cff0aba458ccd2e5c3}\n합격자 발표  아기다리고기다리던 데몬대학교 합격자가 발표되었습니다~\n #! /usr/bin/env python3 #-*- coding: utf-8 -*-  from flask import Flask, render_template from flask import request, redirect, url_for  from functools import wraps import os, json  from db import query  server = Flask(__name__) server.secret_key = os.urandom(32)  @server.route(\u0026#39;/\u0026#39;) def main():  return render_template(\u0026#39;index.html\u0026#39;)   @server.route(\u0026#39;/lookup\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def lookup():  name = request.form.get(\u0026#34;name\u0026#34;)  birth = request.form.get(\u0026#34;birth\u0026#34;)   # db has name, phone, candidate_no, birth, is_passed  if not (name and birth):  return render_template(\u0026#39;result.html\u0026#39;, result=None)   result = query(\u0026#39;SELECT * FROM prob where name=\u0026#34;{}\u0026#34; and birth=\u0026#34;{}\u0026#34;\u0026#39;.format(name, birth))  return render_template(\u0026#39;result.html\u0026#39;, result=result)  if __name__ == \u0026#39;__main__\u0026#39;:  server.run(host=\u0026#39;0.0.0.0\u0026#39;, debug=True) 문제 내 서비스는 name과 birth 파라미터를 통해 POST로 합격자 조회를 요청할 수 있다. 그러나 조회 과정에서 사용되는 SELECT 쿼리에 파라미터가 검증 없이 바로 삽입되면서 SQL Injection을 수행할 수 있다. 다음과 같이 다양한 방식의 접근을 통해 문제를 해결할 수 있다.\n \u0026quot; union select 1, 2, 3, 4, group_concat(name) from prob# \u0026quot; or 1 limit 36,1# \u0026quot; or name like \u0026quot;%HCAMP%\u0026quot;#  FLAG HCAMP{5D46BCE881C8E9EAAA547453D4E15A21}\nCRYPTO Really Safe A,,,  이거이거 정말 안전한데 표현할 방법이 없네,,,\n from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes import gmpy2  e = 65537  p = getPrime(1024) q = getPrime(1024)  N = p * q phi = (p - 1) * (q - 1)  d = gmpy2.divm(1, e, phi)  def padding(msg):  total_length = len(msg) + (len(msg) % 2)  return msg.ljust(total_length, \u0026#39;=\u0026#39;)  def really_secret_cipher(plaintext):  cipher_list = []  msg = padding(plaintext)   for ptr in range(0, len(msg)-2, 2):  M1 = bytes_to_long(msg[ptr:ptr+2].encode())  C1 = gmpy2.powmod(M1, e, N)  M2 = bytes_to_long(msg[ptr+2:ptr+4].encode())  C2 = gmpy2.powmod(M2, e, N)   super_C = C1 * C2  cipher_list.append(long_to_bytes(super_C).hex())   return \u0026#39;.\u0026#39;.join(cipher_list)   FLAG = \u0026#34;HCAMP{******}\u0026#34; if __name__ == \u0026#39;__main__\u0026#39;:  encrypted_flag = really_secret_cipher(FLAG)  with open(\u0026#39;data.enc\u0026#39;, \u0026#39;w\u0026#39;) as f:  print(\u0026#34;FLAG : \u0026#34; + FLAG)  f.write(str(N) + \u0026#39;/\u0026#39; + str(e) + \u0026#39;/\u0026#39; + encrypted_flag) 문제 컨셉은 특정 연산을 추가해 정말 안전한 암호체계를 만들었다는 내용이다. 안전하다고 주장하는 암호체계는 다음과 같다. 암호화할 평문에서 앞 2bytes(M1)와 뒤 2bytes(M2)를 각각 암호화(C1, C2)한 뒤, 구해진 두 암호문을 곱하여 super_C를 생성해낸다. 이렇게 만들어진 super_C는 리스트에 저장하고, 평문의 현재 위치로부터 2bytes 뒤부터 다시 로직을 반복한다. 간단하게 예시를 들면 다음과 같다.\n평문 : \u0026#34;THIS IS SECRET\u0026#34; Encrypt(\u0026#34;TH\u0026#34;)\\*Encrypt(\u0026#34;IS\u0026#34;) -\u0026gt; 저장 Encrypt(\u0026#34;IS\u0026#34;)\\*Encrypt(\u0026#34; I\u0026#34;) -\u0026gt; 저장 Encrypt(\u0026#34; I\u0026#34;)\\*Encrypt(\u0026#34;S \u0026#34;) -\u0026gt; 저장 ... 여기서 위 방식의 취약점은 두 암호문의 곱에 있다. RSA에서 두 암호문의 곱은 평문 곱의 암호문과 같다.\n$$ C1 * C2 = (M1^e\\ mod\\ N) * (M2^e\\ mod\\ N) $$ $$ = (M1^e * M2^e)\\ mod N $$ $$ = (M1*M2)^e\\ mod\\ N $$\n또한, 코드를 통해 평문이 HCAMP{ 로 시작함을 알 수 있다. 이를 통해 뒤 2bytes를 브루트포스 공격으로 찾아낼 수 있다. 다음 코드는 위 취약점을 이용해 복호화 하는 코드이다.\nfrom Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes import gmpy2 import string from binascii import unhexlify  def bruteforce(M1, super_C):  for b1 in string.printable:  for b2 in string.printable:  next_m = b1 + b2  M2 = bytes_to_long(next_m.encode())  guessed_super_C = gmpy2.powmod(M1 * M2, e, N)  #print(guessed_super_C, super_C)  if (guessed_super_C == super_C):  return M2  return False   def crack(prev):  result = long_to_bytes(prev)   for cipher in enc_list:  super_C = bytes_to_long(unhexlify(cipher)) % N  prev = bruteforce(prev, super_C)  result += long_to_bytes(prev)  print(\u0026#39;[*] status : \u0026#39;, result)  if not prev :  return False   return result  data= open(\u0026#39;data.enc\u0026#39;, \u0026#39;r\u0026#39;).read() seped_data_list = data.split(\u0026#39;/\u0026#39;)  N = int(seped_data_list[0]) e = int(seped_data_list[1]) enc_list = seped_data_list[2].split(\u0026#39;.\u0026#39;)   flag = crack(bytes_to_long(b\u0026#39;HC\u0026#39;)) print(\u0026#34;FLAG : \u0026#34; + flag.decode()) FLAG HCAMP{277a5a11b18251b2e34b484ca77d71fe84112d280b7a2d2da6319c7087d6a717}\n"
},
{
	"uri": "https://o_o.jseung.me/tech/network/bgp-hijacking/",
	"title": "BGP Hijacking",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://o_o.jseung.me/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://o_o.jseung.me/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]